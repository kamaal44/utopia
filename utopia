#!/usr/bin/env python3

import os

os.system("printf '\033]2;Utopia Framework\a'")

import sys
import subprocess
import readline
import time

class MyCompleter(object):

    def __init__(self, options):
        self.options = sorted(options)

    def complete(self, text, state):
        if state == 0:
            if not text:
                self.matches = self.options[:]
            else:
                self.matches = [s for s in self.options
                                if s and s.startswith(text)]

        try:
            return self.matches[state]
        except IndexError:
            return None

    def display_matches(self, substitution, matches, longest_match_length):
        line_buffer = readline.get_line_buffer()
        columns = environ.get("COLUMNS", 80)

        print()

        tpl = "{:<" + str(int(max(map(len, matches)) * 1.2)) + "}"

        buffer = ""
        for match in matches:
            match = tpl.format(match[len(substitution):])
            if len(buffer + match) > columns:
                print(buffer)
                buffer = ""
            buffer += match

        if buffer:
            print(buffer)

        print("> ", end="")
        print(line_buffer, end="")
        sys.stdout.flush()


# Core Commands Autocomplete

core = [
    'clear',
    'exit',
    'help',
    'modules',
    'update',
    'use'
    ]

core = [x.split(' ')[0] for x in core]

completer = MyCompleter(list(set(core)))
readline.set_completer_delims(' \t\n;')
readline.set_completer(completer.complete)
readline.parse_and_bind('tab: complete')
readline.set_completion_display_matches_hook(completer.display_matches)

I = '\033[1;77m[i] \033[0m'
Q = '\033[1;77m[?] \033[0m'
G = '\033[1;34m[*] \033[0m'
S = '\033[1;32m[+] \033[0m'
W = '\033[1;33m[!] \033[0m'
E = '\033[1;31m[-] \033[0m'

readline.parse_and_bind("tab: complete")

def banner():
    os.system("clear")
    os.system("cat banner/banner.txt")
    print("")
    print("Utopia Framework v1.0")
    print("------------------------")
    print("")

def main():
    location = []
    pwd = 0
    rhost = ""
    rport = ""
    cmd = "uname -a"
    try:
        ui = input('\033[4mutopia\033[0m> ').strip(" ")
    except:
        sys.exit()
    ui = ui.split()
    while True:
        if ui == []:
            pass
        elif ui[0] == "exit":
            sys.exit()
        elif ui[0] == "clear":
            os.system("clear")
        elif ui[0] == "update":
            os.system("chmod +x etc/update.sh && etc/update.sh")
        elif ui[0] == "help":
            print("")
            print("Core Commands")
            print("=============")
            os.system("cat data/cmds/core_cmds.txt")
            print("")
        elif ui[0] == "modules":
            print("")
            print("Modules")
            print("=======")
            os.system("cat data/modules/modules.txt")
            print("")
        elif ui[0] == "use":
            if len(ui) < 2:
                print("Usage: use <module>")
            else:
                attack = ui[1]
                if attack == "ssh_exec_noauth" or attack == "ssh_shell_noauth":
                    location.append('')
                    location[pwd] = ui[1]
                    
                    commands = [
                    'back',
                    'options',
                    'run',
                    'set'
                    ]

                    commands = [x.split(' ')[0] for x in commands]

                    completer = MyCompleter(list(set(commands)))
                    readline.set_completer_delims(' \t\n;')
                    readline.set_completer(completer.complete)
                    readline.parse_and_bind('tab: complete')
                    readline.set_completion_display_matches_hook(completer.display_matches)
                    
                    try:
                        mod = input('\033[4mutopia\033[0m(\033[1;31m'+location[pwd]+'\033[0m)> ').strip(" ")
                    except:
                        sys.exit()
                    mod = mod.split()
                    while True:
                        if mod == []:
                            pass
                        elif mod[0] == "back":
                            pwd -= 1
                            location = location[0:-1]
                            if location == []:
                                pwd = 0
                                break
                        elif mod[0] == "set":
                            if len(mod) < 3:
                                print("Usage: set <option> <value>")
                            else:
                                if location[pwd] == "ssh_exec_noauth":
                                    if mod[1].lower() == "rhost":
                                        rhost = mod[2]
                                        print(I + "RHOST ==> " + mod[2])
                                    elif mod[1].lower() == "rport":
                                        rport = mod[2]
                                        print(I + "RPORT ==> " + mod[2])
                                    elif mod[1].lower() == "cmd":
                                        cmd = mod[2]
                                        print(I + "CMD ==> " + mod[2])
                                    else:
                                        print(E+"Options is not found!")
                                else:
                                    if mod[1].lower() == "rhost":
                                        rhost = mod[2]
                                        print(I + "RHOST ==> " + mod[2])
                                    elif mod[1].lower() == "rport":
                                        rport = mod[2]
                                        print(I + "RPORT ==> " + mod[2])
                                    else:
                                        print(E+"Options is not found!")
                        elif mod[0] == "options":
                            if location[pwd] == "ssh_exec_noauth":
                                if rhost == "":
                                    rhost = "none"
                                if rport == "":
                                    rport = "none"
                                if cmd == "":
                                    cmd = "none"
                                os.system("ruby data/options/options.rb ssh_exec_noauth "+rhost+" "+rport+" '"+cmd+"'")
                            else:
                                if rhost == "":
                                    rhost = "none"
                                if rport == "":
                                    rport = "none"
                                os.system("ruby data/options/options.rb ssh_shell_noauth "+rhost+" "+rport)
                        elif mod[0] == "use":
                            if len(mod) < 2:
                                print("Usage: use <module>")
                            else:
                                attack = mod[1]
                                if attack == "ssh_exec_noauth" or attack == "ssh_shell_noauth":
                                    location.append('')
                                    pwd += 1
                                    location[pwd] = mod[1]
                                    rhost = ""
                                    rport = ""
                                    cmd = ""
                                else:
                                    print(E+"Module is not found!")
                        elif mod[0] == "run":
                            if rhost == "" or rport == "":
                                print(E+"Failed to start exploit!")
                            else:
                                if location[pwd] == "ssh_exec_noauth":
                                    if cmd == "":
                                        print(E+"Failed to start exploit!")
                                    else:
                                        os.system("python3 core/exploit.py "+rhost+" -p "+rport+" -v '"+cmd+"'")
                                elif attack == "ssh_shell_noauth":
                                    os.system("python3 core/exploit.py "+rhost+" -p "+rport+" -v --shell")
                        elif mod[0] == "clear":
                            os.system("clear")
                        elif mod[0] == "exit":
                            sys.exit()
                        elif mod[0] == "update":
                            os.system("chmod +x etc/update.sh && etc/update.sh")
                        elif mod[0] == "help":
                            print("")
                            print("Core Commands")
                            print("=============")
                            os.system("cat data/cmds/core_cmds.txt")
                            print("")
                            print("Module Commands")
                            print("===============")
                            os.system("cat data/cmds/module_cmds.txt")
                            print("")
                        else:
                            print(E+"Unrecognized command!")
                        try:
                            mod = input('\033[4mutopia\033[0m(\033[1;31m'+location[pwd]+'\033[0m)> ').strip(" ")
                        except:
                            sys.exit()
                        mod = mod.split()
                else:
                    print(E+"Module is not found!")
        else:
            print(E+"Unrecognized command!")
        try:
            ui = input('\033[4mutopia\033[0m> ').strip(" ")
        except:
            sys.exit()
        ui = ui.split()
        
banner()
main()
